version: "3.8"

services:
  russian-cup-backend:
    container_name: "russian-cup-backend-django"
    build:
      context: ..
      dockerfile: deployments/Dockerfile
    volumes:
      - static_volume:/app/static
    env_file:
      - "../.env"
    ports:
      - "9090:9090"
    networks:
      - russian_cup_backend_net
    restart: on-failure

  nginx-russian-cup:
    image: nginx:latest
    container_name: nginx-russian-cup
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./cert/cert.pem:/etc/cert.pem
      - ./cert/key.pem:/etc/key.pem
      - static_volume:/app/static
    networks:
      - russian_cup_backend_net

  russian-cup-pg:
    container_name: "russian-cup-pg"
    image: postgres:15.0
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: b1fddce8ae427c0d
    volumes:
      - "pgdata:/var/lib/postgresql/data"
    healthcheck:
      test: pg_isready -d postgres -U postgres
      retries: 5
      interval: 5s
      timeout: 7s
    networks:
      - russian_cup_backend_net

  # certbot-russian-cup:
  #   ports:
  #     - "6000:80"
  #   env_file:
  #     - ./cert/certbot.env
  #   # и снова мониторуем директорию nginx
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - ./cert/cert.pem:/etc/nginx/cert.pem
  #     - ./cert/key.pem:/etc/nginx/key.pem
  #   build:
  #     context: ./cert
  #     dockerfile: Dockerfile
  #     # задаем переменные среды
  #     args:
  #       DOMAIN_EMAIL: ${DOMAIN_EMAIL}
  #       DOMAIN_URL: ${DOMAIN_URL}
  #   networks:
  #      - russian_cup_backend_net

volumes:
  static_volume:
  pgdata:

networks:
  russian_cup_backend_net:
    external: true



